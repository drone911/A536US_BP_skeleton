[NR_BWP_PROC] Change detected SSB Idx to %d from %d
[PHYPROC][BWP] NrTargetBwpInfo(%4d), RxfBw(%d), FftStartOffset(%d), ActiveBwpId: Target(UL(%d)/DL(%d) Current(UL(%d)/DL(%d)) BwpSwitch(support/delay)(%d)
[BWPPROC][MOD] IsPhyConfigUpdateRequired=%d
[PHYPROC][BWP] SCELL UL-BWP UPDATE: m_CcIdx/sCellIndex/arrayIndex/targetUlBwpId = (%d/%d/%d/%d)
[PHYPROC][BWP] SCELL DL-BWP UPDATE: m_CcIdx/sCellIndex/arrayIndex/targetUlBwpId = (%d/%d/%d/%d)
[PHYPROC][BWP] DefaultDlBwpCfg: (flag(%d)/BwpId(%d)) InactivityTimer(flag(%d)/timer(%d)/timerInslot(%d))
[PHYPROC][BWP] SYS_PARAM_CHG Release, CmdInfo(%d)
[PHYPROC][BWP] (I)Do not handle IPC: CmdInfo(%d) EventInfo(%d)
[BWP_PROC]valid(Coreset0(1)/SearchSpace0(1))[%02d], Coreset0:(tIdx,val(2/2))[%d], (mPattern,numRb,numSymbol(2/2/2))[%d], OffsetVal[%d], SearchSpace0:(tIdx,val(2/2))[%d], (numSSsetPerSolt,monitoringOccastion)(2/2)[%d], kSSB[%d](pbchPayload(%d), ssbOffset(%d))
[PHYPROC][BWP] Do not copy SCELL config (Cc/Scell/Array/mCc)(%d/%d/%d/%d)
[PHYPROC][BWP] CcIndex(%d), sCellIndex(%d), arrayIndex(%d), ActiveBwp(status/id):UL(%d/%d)/DL(%d/%d) supportBwpSwitch(%d), freqRange(%d)
[PHYPROC][BWP][SCELL] DefaultDlBwpCfg: (flag(%d)/BwpId(%d)) InactivityTimer(flag(%d)/timer(%d)/timerInslot(%d))
[PHYPROC][BWP] (I)Do not handle IPC: Cmd(%d)
[BWP_PROC]valid(Coreset0(1)/SearchSpace0(1))[%02d], Coreset0:(tIdx,val(2/2))[%d], (mPattern,numRb,numSymbol(2/2/2))[%d], OffsetVal[%d], SearchSpace0:(tIdx,val(2/2))[%d], (numSSsetPerSolt,monitoringOccastion)(2/2)[%d], kSSB[%d](pbchPayload(%d), ssbOffset(%d))
(f) [StoreScellTciState] demod_cc = %d, scell_idex = %d
[PHYPROC][BWP] StoreScellTciState: valid(%d), ServingCellId(%d), CoresetId(%d), TciStateId(%d), SlotIdx(%d), demod_cc(%d)
[PHYPROC][BWP] RestoreScellTciState: valid(%d), ServingCellId(%d), CoresetId(%d), TciStateId(%d), SlotIdx(%d), m_CcIdx(%d)
[PHYPROC][BWP] ConfigPdcchTciState: ServingCellId(%d), CoresetId(%d), TciStateId(%d), IsScellFlag(%d)
[PHYPROC][BWP] PDCCH Active TCI state Info: CoresetId(%d), aslotIdx(%d), tciStateId(%d), qclType0/1:valid/cell/bwp/rstype/rsindex/qcltype(1/2/1/1/3/1):(%d,%d)
(f)[PHYPROC][BWP] ConfigPdcchTciState: CoresetId%d is not configured.!!!
(f)[PHYPROC][BWP] ConfigPdschTciStatesActDeact: BwpId %d is not equal to ActiveDlBwpId %d.!!!
[PHYPROC][BWP] ConfigPdschTciStatesActDeact: ServingCellId(%d), BwpId(%d), ActTciState(0x%x,0x%x,0x%x,0x%x)
[PHYPROC][BWP] ConfigPdschTciStatesActDeact: iOct,iBit(%d), cnt(%d), valid(%d), tciStateId(%d), qclType0:valid(%d), servCellIndex(%d), bwpId(%d), rsType(%d), rsIndex(%d), qclType(%d)
(F)ERROR in type0Scs(%d) SystemBW(%d)for FR1
(F)ERROR in freqRange(%d)
[BWPPROC]GetSystemBandwidth: SystemBW(%d) freqRange(%d) type0Scs(%d) StartPrb(%d) Length(%d)
(F)ERROR in SCS(%d) SystemBW(%d)
(F)ERROR in GetInitialBwpCfg: BwpLinkType(%d)
(F)ERROR in GetInitialBwpCfg: BwpLinkType(%d)
(F)ERROR in GetScellActiveBwpCfg: ScellArrayIdx(%d)
(F)ERROR in GetInitialBwpCfg: BwpLinkType(%d)
(F)ERROR in GetInitialBwpCfg: sCellIndex(%d)(%d)
(F)ERROR in GetScellAllBwpCfg: BwpLinkType(%d)
(F)ERROR in GetScellAllBwpCfg: sCellIndex(%d)(%d)
GetPcellBwpCfgForScell: NumOfDlDataToULACK(%d)/harqAckCodebook:flag_valid(%d/%d)/value_sp(%d)/dc(%d)/tx(%d)
(F)ERROR in GetPcellBwpCfgForScell: BwpLinkType(%d)
[BWP_DLPARAMTYPE_GENERICPARAM] Idx(%d), BwpId(%d), StartPrb(%d), Length(%d), subcarrierSpacing(%d), cyclicprefix(%d), RA Type(%d), RbgSize(%d)
[BWP_ULPARAMTYPE_GENERICPARAM] Idx(%d), BwpId(%d), StartPrb(%d), Length(%d), subcarrierSpacing(%d), cyclicprefix(%d), RA Type(%d), RbgSize(%d)
(F)Invalid SCell Config for tx - CaProc.status (%d)
(F)Invalid SCell Config for tx - CaProcToBwpProc.status (%d)
[GetScellAllCfgForTx] TxScellCfg ccIndex (%d) array is cleared
(F)ERROR in GetScellAllCfgForTx: ScellArrayIdx(%d)
[BWPPROC][MOD] GetActiveBwpUlCfg_BwpCommon: flag(%d)/update(%d)
[BWPPROC][MOD] GetActiveBwpUlCfg_BwpDedi: flag(%d)/update(%d)
(F)Error in GetActiveBwpUlCfg_StartPrbAndLen: m_BwpProcDb.m_p_BwpUl is NULL!, StartPrbUl(%d), LengthUl(%d)
[PHY_PROC][BWP][UL] locationandbandwidth(%d), SCS_BWP/CARRIER(%d/%d), offsetToCarrier(%d), RB_start(%d), m_BwpProcDb.m_StartPrbUl(%d)/CrbUl(%d), m_BwpProcDb.m_LengthDl(%d), status_reg(%d)/(%d)
(F)Error in GetActiveBwpDlCfg_StartPrbAndLen: m_BwpProcDb.m_p_BwpDl is NULL!
[PHY_PROC][BWP][UL][SCELL] locationandbandwidth(%d), SCS_BWP/CARRIER(%d/%d), offsetToCarrier(%d), RB_start(%d), m_BwpProcDb.m_StartPrbUl(%d)/CrbUl(%d), m_BwpProcDb.m_LengthUl(%d)
[BWPPROC][MOD] GetActiveBwpDlCfg_BwpCommon: flag(%d)/update(%d)
[BWPPROC][MOD] GetActiveBwpDlCfg_BwpDedi: flag(%d)/update(%d)
(F)Error in GetActiveBwpDlCfg_StartPrbAndLen: m_BwpProcDb.m_p_BwpDl is NULL! StartPrbDl(%d), LengthDl(%d)
[PHY_PROC][BWP][DL] locationandbandwidth(%d), SCS_BWP/CARRIER(%d/%d), offsetToCarrier(%d), RB_start(%d), m_BwpProcDb.m_StartPrbDl(%d)/CrbDl(%d), m_BwpProcDb.m_LengthDl(%d), status_reg(%d)/(%d)
(F)Error in GetActiveBwpDlCfg_StartPrbAndLen: m_BwpProcDb.m_p_BwpDl is NULL!
[PHY_PROC][BWP][DL][SCELL] locationandbandwidth(%d), SCS_BWP/CARRIER(%d/%d), offsetToCarrier(%d), RB_start(%d), m_BwpProcDb.m_StartPrbDl(%d)/CrbDl(%d), m_BwpProcDb.m_LengthDl(%d)
[PHY_PROC][BWP][DL] CoresetZero: valid(%d)/value(%d), SearchSpaceZero: valid(%d)/value(%d)
(F)Error in GetInitialBwpDlCfg_StartPrbAndLen: m_BwpProcDb.m_p_BwpDl is NULL! StartPrbDl(%d), LengthDl(%d)
[PHY_PROC][INIT_BWP][DL] locationandbandwidth(%d), SCS_BWP/CARRIER(%d/%d), offsetToCarrier(%d), RB_start(%d), m_BwpProcDb.m_StartPrbDl(%d)/CrbDl(%d), m_BwpProcDb.m_LengthDl(%d), status_reg(%d)/(%d)
(F)Error in GetInitialBwpUlCfg_StartPrbAndLen: p_BwpUl is NULL! InitBwpCfg: StartPrbUl(%d)/LengthUl(%d)
[PHY_PROC][INIT_BWP][UL] locationandbandwidth(%d), SCS_BWP/CARRIER(%d/%d), offsetToCarrier(%d), RB_start(%d), m_BwpProcDb.m_StartPrbUl(%d)/CrbUl(%d), m_BwpProcDb.m_LengthDl(%d), status_reg(%d)/(%d)
(F)ERROR in freqRange(%d)/subcarrierSpacingCommon(%d)
[PHY_PROC][SIB1] controlResourceSet0(%d), ssbScs(%d), type0Scs(%d), minChBw(%d), k_ssb(%d), m_SsbTypefor30k(%d), freqRange(%d), subcarrierSpacingCommon(%d)
(F)ERROR in freqRange(%d)/subcarrierSpacingCommon(%d)
[PHY_PROC][SIB1] controlResourceSet0(%d), ssbScs(%d), type0Scs(%d), minChBw(%d), k_ssb(%d), m_SsbTypefor30k(%d), freqRange(%d), subcarrierSpacingCommon(%d)
(F) Invalid CoresetZero parameters: ssbScs(%d), type0Scs(%d), minChBw(%d)
(F) Invalid CoresetZero parameters: ssbScs(%d), type0Scs(%d), minChBw(%d)
[GetUeCapaInfo] maxNumberMIMO_LayersPDSCH(%d), numTxAnt(%d)
(F)Error in GetUeCapaInfo: m_CcIdx(%d)
[GetScellAllCfgForTx] TxScellCfg ccIndex (%d) array is cleared
